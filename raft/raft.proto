syntax = "proto3";

service Raft {
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
}

// Invoked by candidates to gather votes.
message RequestVoteRequest {
    // candidate’s term
    int32 term = 1;

    // candidate requesting vote
    int32 candidate_id = 2;

    // index of candidate’s last log entry
    int32 last_log_index = 3;

    // term of candidate’s last log entry
    int32 last_log_term = 4;
}

message RequestVoteResponse {
    // current term, for candidate to update itself
    int32 term = 1;

    // true means candidate received vote
    bool vote_granted = 2;
}

// Invoked by leader to replicate log entries; also used as heartbeat.
message AppendEntriesRequest {
    // leader's term
    int32 term = 1;

    // so follower can redirect clients
    int32 leader_id = 2;

    // index of log entry immediately preceding new ones
    int32 prev_log_index = 3;

    // term of prev_log_index entry
    int32 prev_log_term = 4;

    // log entries to store (empty for heartbeat; may send more than one for efficiency)
    repeated LogEntry entries = 5;

    // leader's commit_index
    int32 leader_commit = 6;
}

message AppendEntriesResponse {
    // current_term, for leader to update itself
    int32 term = 1;

    // true if follower contained entry matching prev_log_index and prev_log_term
    bool success = 2;
}

message LogEntry {
    int32 index = 1;
    int32 term = 2;
    string command = 3;
}
